
#Область СлужебныйПрограммныйИнтерфейс

#Область JSON

// TODO: описание
Функция ПрочитатьНовыйJSON(Тело) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);	
	
	Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции

// TODO: описание
Функция ЗаписатьНовыйJson(Структура) Экспорт

	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(Новый ПараметрыЗаписиJSON);	
	ЗаписатьJSON(ЗаписьJson, Структура);
	
	Возврат ЗаписьJson.Закрыть();	

КонецФункции

#КонецОбласти

// todo: <Описание>
Функция КодЯзыкаПользователя() Экспорт

	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Язык.КодЯзыка;	

КонецФункции

// todo: <Описание>
Функция АдресДиспетчера()

	Возврат "localhost/dsispatcher/hs/core/v1/"; // todo: брать из настроек ядра, адресов должно быть несколько, в т.ч. резервный

КонецФункции

// todo: <Описание>
Функция Токен()

	Возврат "67sd8vb76dfg876dfg87786"; // todo: брать из настроек
	
КонецФункции

// todo: <Описание>
Функция НовыйУникальныйИдентификатор()

	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

// todo: <Описание>
Функция СтруктураЗапроса(КомандаЗапроса, ПараметрыЗапроса)
	
	СтруктураЗапроса = Новый Структура("token, id, command, param, language",
		Токен(),
		НовыйУникальныйИдентификатор(),
		КомандаЗапроса,
		ПараметрыЗапроса,
		КодЯзыкаПользователя());	

	Возврат СтруктураЗапроса;	

КонецФункции

// todo: <Описание>
Функция HTTPСоединениеОтправитьДляОбработки(КомандаЗапроса, ПараметрыЗапроса)
	
	СтруктураЗапроса = СтруктураЗапроса(КомандаЗапроса, ПараметрыЗапроса);	
	СтрокаJSON = ЗаписатьНовыйJson(СтруктураЗапроса);
	
	Соединение = Новый HTTPСоединение(АдресДиспетчера()); // todo: брать из настроек ядра, адресов должнобыть несколько, в т.ч. резервный
	Запрос = Новый HTTPЗапрос("POST");
	
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Соединение.ОтправитьДляОбработки(Запрос);	
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// todo: <Описание процедуры> 
Процедура СообщитьПользователю(
		Знач ТекстСообщения,
		Знач Часть1 = "",
		Знач Часть2 = "",
		Знач Часть3 = "",
		Знач Часть4 = "",
		Знач Часть5 = "") Экспорт
		
	// todo: ой, не красиво как	
	Если Часть1 <> "" Тогда
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Часть1);
	КонецЕсли;		
	Если Часть2 <> "" Тогда
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Часть2);
	КонецЕсли;		
	Если Часть3 <> "" Тогда
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Часть3);
	КонецЕсли;		
	Если Часть4 <> "" Тогда
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Часть4);
	КонецЕсли;		
	Если Часть5 <> "" Тогда
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Часть5);
	КонецЕсли;		
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СокрЛП(ТекстСообщения);
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#Область Мультиязычность

// todo: <Описание функции>
// доработать функцию на более просто читаемую
// когда будет много Если, тогда они сильно разрастётся,
// а так же заложить возможность английского и испанского
Функция ТекстИзСловаря(СтрокаСловаря) Экспорт
	
	Язык = КодЯзыкаПользователя();
	//Язык = "en";
	
	Если СтрокаСловаря = "НеМогуЗаписатьЭлементСправочника" Тогда
		
		Если Язык = "en" Тогда
			Возврат "I can't write a catalog item"
		КонецЕсли;
		
		Возврат "Не могу записать элемент справочника";
		
	ИначеЕсли СтрокаСловаря = "НеМогуУдалитьЭлементСправочника" Тогда
		
		Если Язык = "en" Тогда
			Возврат "I can't delete a directory item"
		КонецЕсли;
		
		Возврат "Не могу удалить элемент справочника";		
		
	ИначеЕсли СтрокаСловаря = "НеВозможноОтправитьРасширениеВДиспетчерЭлементСправочникаНеЗаписан" Тогда
		
		Если Язык = "en" Тогда
			Возврат "The extension cannot be sent to the dispatcher. Element is not recorded"
		КонецЕсли;
		
		Возврат "Не возможно отправить расширение в диспетчер. Элемент справочника не записан";
		
	ИначеЕсли СтрокаСловаря = "Ошибка" Тогда
		
		Если Язык = "en" Тогда
			Возврат "Error"
		КонецЕсли;
		
		Возврат "Ошибка";
		
	ИначеЕсли СтрокаСловаря = "КодСостояния" Тогда
		
		Если Язык = "en" Тогда
			Возврат "Status code"
		КонецЕсли;
		
		Возврат "Код состояния";
		
	ИначеЕсли СтрокаСловаря = "НеЗаданИдентификаторРасширения" Тогда
		
		Если Язык = "en" Тогда
			Возврат "Extension ID not specified"
		КонецЕсли;
		
		Возврат "Не задан идентификатор расширения";
		
	ИначеЕсли СтрокаСловаря = "НеВыбранаСтрока" Тогда
		
		Если Язык = "en" Тогда
			Возврат "Line not selected"
		КонецЕсли;
		
		Возврат "Не выбрана строка";
	
	ИначеЕсли СтрокаСловаря = "РасширениеУстановлено" Тогда
		
		Если Язык = "en" Тогда
			Возврат "The extension is installed"
		КонецЕсли;
		
		Возврат "Расширение установлено";
		
	ИначеЕсли СтрокаСловаря = "РасширениеОбновлено" Тогда
		
		Если Язык = "en" Тогда
			Возврат "The extension has been updated"
		КонецЕсли;
		
		Возврат "Расширение обновлено";
		
	// Шаблон	
	ИначеЕсли СтрокаСловаря = "123" Тогда
		
		Если Язык = "en" Тогда
			Возврат "123"
		КонецЕсли;
		
		Возврат "123";
		
	КонецЕсли;	
	
	Если Язык = "en" Тогда		
		Возврат СтрШаблон("'%1': %2", СтрокаСловаря, "there is no decryption to display");		
	КонецЕсли;
	
	Возврат СтрШаблон("'%1': %2", СтрокаСловаря, "нет расшифровки для отображения");
	
КонецФункции

// todo: <Описание процедуры>
Процедура СообщитьПользователюОбОшибке(
		Знач ТекстОшибки,
		Знач Часть1 = "",
		Знач Часть2 = "",
		Знач Часть3 = "",
		Знач Часть4 = "",
		Знач Часть5 = "") Экспорт

	СообщитьПользователю(
		ТекстИзСловаря(ТекстОшибки), 
		Часть1, 
		Часть2,
		Часть3,
		Часть4,
		Часть5);			

КонецПроцедуры

#КонецОбласти

#Область ЗаписьУдалениеОбъектов

// todo: <Описание>
Процедура ЗаписатьЭлементСправочника(ЭлементСправочника) Экспорт
	
	Попытка
		ЭлементСправочника.Записать();
	Исключение
		СообщитьПользователюОбОшибке(
			"НеМогуЗаписатьЭлементСправочника", 
			ЭлементСправочника.Метаданные().Имя, 
			ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

// todo: <Описание>
Процедура УдалитьЭлементСправочника(ЭлементСправочника) Экспорт
	
	Попытка
		ОбъектСправочника = ЭлементСправочника.ПолучитьОбъект();
		ОбъектСправочника.Удалить();
	Исключение
		СообщитьПользователюОбОшибке(
			"НеМогуУдалитьЭлементСправочника", 
			ЭлементСправочника.Метаданные().Имя, 
			ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

// todo: <Описание процедуры>
&НаСервере
Процедура ОбновитьРасширенияЯдра() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ядро_Расширения.Ссылка КАК Ссылка,
		|	Ядро_Расширения.ИдентификаторЛокальный КАК ИдентификаторЛокальный,
		|	Ядро_Расширения.ХешЛокальный КАК ХешЛокальный
		|ИЗ
		|	Справочник.Ядро_Расширения КАК Ядро_Расширения";
	
	РасширенияВСправочнике = Запрос.Выполнить().Выгрузить();
	ИдРасширений = Новый Массив;
	
	Для каждого РасширениеВКонфигурации Из РасширенияКонфигурации.Получить() Цикл
		
		Идентификатор = РасширениеВКонфигурации.УникальныйИдентификатор;
		ХешЛокальный = Строка(РасширениеВКонфигурации.ХешСумма);
		СтрокаТЗ = РасширенияВСправочнике.Найти(Идентификатор, "ИдентификаторЛокальный");
		
		Если СтрокаТЗ = Неопределено  Тогда
			
			НовыйЭлемент = Справочники.Ядро_Расширения.СоздатьЭлемент();
			ЗаписатьРасширениеВЯдре(НовыйЭлемент, РасширениеВКонфигурации, Идентификатор, ХешЛокальный);
			
		ИначеЕсли СтрокаТЗ.ХешЛокальный <> ХешЛокальный Тогда
			
			СуществующийЭлемент = СтрокаТЗ.Ссылка.ПолучитьОбъект();
			ЗаписатьРасширениеВЯдре(СуществующийЭлемент, РасширениеВКонфигурации, Идентификатор, ХешЛокальный);
			
		КонецЕсли;
		
		ИдРасширений.Добавить(Идентификатор);
	
	КонецЦикла;
	
	РасширенияКУдалению = Новый Массив;
	
	Для каждого РасширениеВСправочнике Из РасширенияВСправочнике Цикл	
		
		Если ИдРасширений.Найти(РасширениеВСправочнике.ИдентификаторЛокальный) = Неопределено Тогда			
			Ядро_Сервер.УдалитьЭлементСправочника(РасширениеВСправочнике.Ссылка);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// todo: <Описание процедуры>
Процедура ЗаписатьРасширениеВЯдре(ЭлементСправочника, РасширениеВКонфигурации, Идентификатор, ХешЛокальный)

	ЭлементСправочника.Наименование = РасширениеВКонфигурации.Синоним;
	ЭлементСправочника.ИдентификаторЛокальный = Идентификатор;
	ЭлементСправочника.ХешЛокальный = ХешЛокальный;
	ЭлементСправочника.Версия = РасширениеВКонфигурации.Версия;
	ЭлементСправочника.АвтозагрузкаССервера = Истина; // todo: далее брать из глобальных настроек
	
	Ядро_Сервер.ЗаписатьЭлементСправочника(ЭлементСправочника);

КонецПроцедуры

#КонецОбласти
 
#Область ОбщениеСДиспетчером

// todo: <Описание>
Процедура ОтправитьРасширениеВДиспетчер(Ссылка) Экспорт
		
	ПараметрыЗапроса = Новый Структура("name, version, idExtension",
		Ссылка.Наименование,
		Ссылка.Версия,
		Строка(Ссылка.ИдентификаторСерверный));
	
	Для каждого РасширениеВКонфигурации Из РасширенияКонфигурации.Получить() Цикл
		
		Идентификатор = РасширениеВКонфигурации.УникальныйИдентификатор;
		ХешЛокальный = Строка(РасширениеВКонфигурации.ХешСумма);
		
		Если ХешЛокальный = Ссылка.ХешЛокальный Тогда
			
			ДвоичныеДанные = РасширениеВКонфигурации.ПолучитьДанные();
			СтрокаДвоичныхДанных = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные); 
			ПараметрыЗапроса.Вставить("binaryData", СтрокаДвоичныхДанных);			
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;	
	
	Попытка
		
		Ответ = HTTPСоединениеОтправитьДляОбработки("updateExtension", ПараметрыЗапроса);
		Тело = Ответ.ПолучитьТелоКакСтроку();
		
		// todo: реализовать логирование запросов и ответов, в настройках указывать включать или нет логирование
		
		Если Ответ.КодСостояния = 200 Тогда
			
			СтруктураОтвета = ПрочитатьНовыйJSON(Тело);
			
			Если Не СтруктураОтвета.ok Тогда				
				СообщитьПользователюОбОшибке("Ошибка", СтруктураОтвета.message);
			Иначе
				
				Объект = Ссылка.ПолучитьОбъект();
				ИдентификаторСерверный = Новый УникальныйИдентификатор(СтруктураОтвета.result.idExtension);
				
				Если Объект.ИдентификаторСерверный <> ИдентификаторСерверный Тогда
				
					Объект.ИдентификаторСерверный = ИдентификаторСерверный;
					ЗаписатьЭлементСправочника(Объект);
				
				КонецЕсли;						
				
				Ядро_Сервер.СообщитьПользователю(СтруктураОтвета.message);
				
			КонецЕсли;
						
		Иначе
			
			СообщитьПользователюОбОшибке("КодСостояния", Ответ.КодСостояния, Символы.ПС, Тело);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьПользователюОбОшибке("Ошибка", ОписаниеОшибки());
		
	КонецПопытки;	
	
КонецПроцедуры

// todo: <Описание>
Функция ПоискРасширений(СтрокаПоиска) Экспорт
	
	ПараметрыЗапроса = Новый Структура("text", СтрокаПоиска);
	
	Попытка
		
		Ответ = HTTPСоединениеОтправитьДляОбработки("searchExtension", ПараметрыЗапроса);
		Тело = Ответ.ПолучитьТелоКакСтроку();
		
		// todo: реализовать логирование запросов и ответов, в настройках указывать включать или нет логирование
		
		Если Ответ.КодСостояния = 200 Тогда
			
			СтруктураОтвета = ПрочитатьНовыйJSON(Тело);
			
			Если Не СтруктураОтвета.ok Тогда				
				СообщитьПользователюОбОшибке("Ошибка", СтруктураОтвета.message);
			Иначе
				
				Возврат СтруктураОтвета;
				
			КонецЕсли;
						
		Иначе
			
			СообщитьПользователюОбОшибке("КодСостояния", Ответ.КодСостояния, Символы.ПС, Тело);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьПользователюОбОшибке("Ошибка", ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// todo: <Описание>
Функция УстановитьРасширениеИзДиспетчера(ИдентификаторРасширения) Экспорт
	
	Если ПустаяСтрока(ИдентификаторРасширения) Тогда	
		СообщитьПользователюОбОшибке("НеЗаданИдентификаторРасширения");
		Возврат "";	
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("id", ИдентификаторРасширения);
	
	Попытка
		
		Ответ = HTTPСоединениеОтправитьДляОбработки("giveExtension", ПараметрыЗапроса);
		Тело = Ответ.ПолучитьТелоКакСтроку();
		
		// todo: реализовать логирование запросов и ответов, в настройках указывать включать или нет логирование
		
		Если Ответ.КодСостояния = 200 Тогда
			
			СтруктураОтвета = ПрочитатьНовыйJSON(Тело);
			
			Если Не СтруктураОтвета.ok Тогда				
				СообщитьПользователюОбОшибке("Ошибка", СтруктураОтвета.message);
			Иначе
				
				ДвоичныеДанные = ПолучитьДвоичныеДанныеИзBase64Строки(СтруктураОтвета.result.binaryData);
				ОписаниеРасширения = Новый ОписаниеКонфигурации(ДвоичныеДанные);
				
				Отбор = Новый Структура("Имя", ОписаниеРасширения.Имя);
				СуществующиеРасширения = РасширенияКонфигурации.Получить(Отбор);
				СтатусУстановки = "РасширениеОбновлено";
				
				Если СуществующиеРасширения.Количество() > 0 Тогда				
					Расширение = СуществующиеРасширения[0];
				Иначе
					Расширение = РасширенияКонфигурации.Создать();
					СтатусУстановки = "РасширениеУстановлено";
				КонецЕсли;				
				
				Расширение.БезопасныйРежим = Ложь;
				Расширение.ИспользуетсяВРаспределеннойИнформационнойБазе = Истина;
				
				Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
				Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
				Расширение.ЗащитаОтОпасныхДействий = Защита;
				
				Ошибки = Расширение.ПроверитьВозможностьПрименения(ДвоичныеДанные);
				
				Если Ошибки.Количество() > 0 Тогда
					СообщитьПользователюОбОшибке("Ошибка", Ошибки[0].Описание);
				Иначе
					
					ЗаписалиРасширение = Ложь;
					
					Попытка					
						Расширение.Записать(ДвоичныеДанные);
						ЗаписалиРасширение = Истина;					
					Исключение						
						СообщитьПользователюОбОшибке("Ошибка", ОписаниеОшибки());					
					КонецПопытки;
					
					Если ЗаписалиРасширение Тогда
						ОбновитьРасширенияЯдра();
						Возврат ТекстИзСловаря(СтатусУстановки); 
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
						
		Иначе
			
			СообщитьПользователюОбОшибке("КодСостояния", Ответ.КодСостояния, Символы.ПС, Тело);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьПользователюОбОшибке("Ошибка", ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

#КонецОбласти
